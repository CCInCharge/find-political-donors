import unittest
from sortedcontainers import SortedDict
import src.ProcessData as ProcessData
import src.ParseData as ParseData

def invalid_for_zip():
    data_by_zip = dict()
    row = "C00177436|N|M2|P|201702039042410893|15|IND|WATJEN, THOMAS R.|KEY LARGO|FL|3a0375267|UNUM|CHAIRMAN OF THE BOARD|01042017|5000||40373239|1147350|||4020820171370029334"
    data = ParseData.parse_row(row)
    output_data_zip = ProcessData.process_for_zip(data, data_by_zip)
    return output_data_zip

def valid_row_for_zip():
    data_by_zip = dict()
    row = "C00177436|N|M2|P|201702039042410893|15|IND|WATJEN, THOMAS R.|KEY LARGO|FL|330375267|UNUM|CHAIRMAN OF THE BOARD|01042017|5000||40373239|1147350|||4020820171370029334"
    data = ParseData.parse_row(row)
    output_data_zip = ProcessData.process_for_zip(data, data_by_zip)
    return output_data_zip

def multiple_rows_for_zip():
    rows = []
    rows.append("C00629618|N|TER|P|201701230300133512|15C|IND|PEREZ, JOHN A|LOS ANGELES|CA|90017|PRINCIPAL|DOUBLE NICKEL ADVISORS|01032017|40|H6CA34245|SA01251735122|1141239|||2012520171368850783")
    rows.append("C00177436|N|M2|P|201702039042410894|15|IND|DEEHAN, WILLIAM N|ALPHARETTA|GA|300047357|UNUM|SVP, SALES, CL|01312017|384||PR2283873845050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029337")
    rows.append("C00384818|N|M2|P|201702039042412112|15|IND|ABBOTT, JOSEPH|WOONSOCKET|RI|028956146|CVS HEALTH|VP, RETAIL PHARMACY OPS|01122017|250||2017020211435-887|1147467|||4020820171370030285")
    rows.append("C00177436|N|M2|P|201702039042410893|15|IND|SABOURIN, JAMES|LOOKOUT MOUNTAIN|GA|307502818|UNUM|SVP, CORPORATE COMMUNICATIONS|01312017|230||PR1890575345050|1147350||P/R DEDUCTION ($115.00 BI-WEEKLY)|4020820171370029335")
    rows.append("C00177436|N|M2|P|201702039042410895|15|IND|JEROME, CHRISTOPHER|FALMOUTH|ME|041051896|UNUM|EVP, GLOBAL SERVICES|01312017|384||PR2283905245050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029342")
    rows.append("C00384818|N|M2|P|201702039042412112|15|IND|BAKER, SCOTT|WOONSOCKET|RI|028956146|CVS HEALTH|EVP, HEAD OF RETAIL OPERATIONS|01122017|333||2017020211435-910|1147467|||4020820171370030287")
    rows.append("C00177436|N|M2|P|201702039042410894|15|IND|FOLEY, JOSEPH|FALMOUTH|ME|041051935|UNUM|SVP, CORP MKTG & PUBLIC RELAT.|01312017|384||PR2283904845050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029339")
    data_by_zip = dict()
    output_data_zip = []
    for row in rows:
        data = ParseData.parse_row(row)
        output_data_zip.append(ProcessData.process_for_zip(data, data_by_zip))
    return output_data_zip

def invalid_for_date():
    data_by_date = SortedDict()
    row = "C00177436|N|M2|P|201702039042410893|15|IND|WATJEN, THOMAS R.|KEY LARGO|FL|330375267|UNUM|CHAIRMAN OF THE BOARD|04312017|5000||40373239|1147350|||4020820171370029334"
    data = ParseData.parse_row(row)
    output_data_date = ProcessData.process_for_date(data, data_by_date)
    return data_by_date

def valid_row_for_date():
    data_by_date = SortedDict()
    row = "C00177436|N|M2|P|201702039042410893|15|IND|WATJEN, THOMAS R.|KEY LARGO|FL|330375267|UNUM|CHAIRMAN OF THE BOARD|01042017|5000||40373239|1147350|||4020820171370029334"
    data = ParseData.parse_row(row)
    output_data_date = ProcessData.process_for_date(data, data_by_date)
    return data_by_date

def multiple_rows_for_date():
    rows = []
    rows.append("C00629618|N|TER|P|201701230300133512|15C|IND|PEREZ, JOHN A|LOS ANGELES|CA|90017|PRINCIPAL|DOUBLE NICKEL ADVISORS|01032017|40|H6CA34245|SA01251735122|1141239|||2012520171368850783")
    rows.append("C00177436|N|M2|P|201702039042410894|15|IND|DEEHAN, WILLIAM N|ALPHARETTA|GA|300047357|UNUM|SVP, SALES, CL|01312017|384||PR2283873845050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029337")
    rows.append("C00384818|N|M2|P|201702039042412112|15|IND|ABBOTT, JOSEPH|WOONSOCKET|RI|028956146|CVS HEALTH|VP, RETAIL PHARMACY OPS|01122017|250||2017020211435-887|1147467|||4020820171370030285")
    rows.append("C00177436|N|M2|P|201702039042410893|15|IND|SABOURIN, JAMES|LOOKOUT MOUNTAIN|GA|307502818|UNUM|SVP, CORPORATE COMMUNICATIONS|01312017|230||PR1890575345050|1147350||P/R DEDUCTION ($115.00 BI-WEEKLY)|4020820171370029335")
    rows.append("C00177436|N|M2|P|201702039042410895|15|IND|JEROME, CHRISTOPHER|FALMOUTH|ME|041051896|UNUM|EVP, GLOBAL SERVICES|01312017|384||PR2283905245050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029342")
    rows.append("C00384818|N|M2|P|201702039042412112|15|IND|BAKER, SCOTT|WOONSOCKET|RI|028956146|CVS HEALTH|EVP, HEAD OF RETAIL OPERATIONS|01122017|333||2017020211435-910|1147467|||4020820171370030287")
    rows.append("C00177436|N|M2|P|201702039042410894|15|IND|FOLEY, JOSEPH|FALMOUTH|ME|041051935|UNUM|SVP, CORP MKTG & PUBLIC RELAT.|01312017|384||PR2283904845050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029339")
    data_by_date = SortedDict()
    for row in rows:
        data = ParseData.parse_row(row)
        ProcessData.process_for_date(data, data_by_date)
    return data_by_date

def output_multiple_rows_for_date():
    rows = []
    rows.append("C00629618|N|TER|P|201701230300133512|15C|IND|PEREZ, JOHN A|LOS ANGELES|CA|90017|PRINCIPAL|DOUBLE NICKEL ADVISORS|01032017|40|H6CA34245|SA01251735122|1141239|||2012520171368850783")
    rows.append("C00177436|N|M2|P|201702039042410894|15|IND|DEEHAN, WILLIAM N|ALPHARETTA|GA|300047357|UNUM|SVP, SALES, CL|01312017|384||PR2283873845050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029337")
    rows.append("C00384818|N|M2|P|201702039042412112|15|IND|ABBOTT, JOSEPH|WOONSOCKET|RI|028956146|CVS HEALTH|VP, RETAIL PHARMACY OPS|01122017|250||2017020211435-887|1147467|||4020820171370030285")
    rows.append("C00177436|N|M2|P|201702039042410893|15|IND|SABOURIN, JAMES|LOOKOUT MOUNTAIN|GA|307502818|UNUM|SVP, CORPORATE COMMUNICATIONS|01312017|230||PR1890575345050|1147350||P/R DEDUCTION ($115.00 BI-WEEKLY)|4020820171370029335")
    rows.append("C00177436|N|M2|P|201702039042410895|15|IND|JEROME, CHRISTOPHER|FALMOUTH|ME|041051896|UNUM|EVP, GLOBAL SERVICES|01312017|384||PR2283905245050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029342")
    rows.append("C00384818|N|M2|P|201702039042412112|15|IND|BAKER, SCOTT|WOONSOCKET|RI|028956146|CVS HEALTH|EVP, HEAD OF RETAIL OPERATIONS|01122017|333||2017020211435-910|1147467|||4020820171370030287")
    rows.append("C00177436|N|M2|P|201702039042410894|15|IND|FOLEY, JOSEPH|FALMOUTH|ME|041051935|UNUM|SVP, CORP MKTG & PUBLIC RELAT.|01312017|384||PR2283904845050|1147350||P/R DEDUCTION ($192.00 BI-WEEKLY)|4020820171370029339")
    data_by_date = SortedDict()
    output_data = []
    for row in rows:
        data = ParseData.parse_row(row)
        ProcessData.process_for_date(data, data_by_date)
    while len(data_by_date) > 0:
        output_data.append(ProcessData.output_for_date(data_by_date))
    return output_data

class TestProcessData(unittest.TestCase):
    def test_invalid_for_zip(self):
        self.assertEqual(invalid_for_zip(), None)
    
    def test_valid_row_for_zip(self):
        self.assertEqual(valid_row_for_zip(), "C00177436|33037|5000|1|5000")

    def test_multiple_rows_for_zip(self):
        a = multiple_rows_for_zip()
        self.assertEqual(a[0], None)
        self.assertEqual(a[1], "C00177436|30004|384|1|384")
        self.assertEqual(a[2], "C00384818|02895|250|1|250")
        self.assertEqual(a[3], "C00177436|30750|230|1|230")
        self.assertEqual(a[4], "C00177436|04105|384|1|384")
        self.assertEqual(a[5], "C00384818|02895|292|2|583")
        self.assertEqual(a[6], "C00177436|04105|384|2|768")
    
    def test_invalid_for_date(self):
        a = invalid_for_date()
        self.assertEqual(len(a), 0)
    
    def test_valid_row_for_date(self):
        a = valid_row_for_date()
        self.assertEqual(len(a), 1)
        self.assertIn('C00177436|20170104', a)
    
    def test_multiple_rows_for_date(self):
        a = multiple_rows_for_date()
        self.assertEqual(len(a), 2)
        self.assertIn('C00177436|20170131', a)
        self.assertIn('C00384818|20170112', a)

    def test_output_multiple_rows_for_date(self):
        a = output_multiple_rows_for_date()
        self.assertEqual(len(a), 2)
        self.assertEqual(a[0], 'C00177436|01312017|384|4|1382')
        self.assertEqual(a[1], 'C00384818|01122017|292|2|583')